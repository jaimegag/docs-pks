---
title: Installing Ingress Routing on Enterprise PKS
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to configure Istio as your <%= vars.product_full %> deployment's Ingress Router."

## <a id='overview'></a> Overview

[About Ingress Routing](https://docs.pivotal.io/runtimes/pks/1-3/nsxt-ingress-srvc-lb.html)
A Kubernetes ingress resource exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. 
Traffic routing is controlled by rules defined on the ingress resource. 

<img src="images/ingress-architecture.png" alt="Ingress Archecture without NSX-T">
<%#= original graphic is here images/ingress-architecture.graffle %>
For more information about ingress resources see the Kubernetes documentation.

The NSX-T load balancer that is automatically provisioned by PKS provides two Layer 7 virtual servers for 
Kubernetes ingress resources, one for HTTP and the other for HTTPS. 

<img src="images/ingress-architecture-nsxt.png" alt="Ingress Archecture on NSX-T">
<%#= original graphic is here images/ingress-architecture-nsxt.graffle %>
For more information about NSX-T load balancers see Supported Load Balancer Features in the NSX-T documentation.

You define ingress resource configuration in the manifest of your Kubernetes deployment. Use wildcard DNS entries to route traffic to the exposed ingress resource.



Cookbook description: "_In most situations deploying a separate load balancer instance for an individual web app will lead to IP exhaustion and unnecessary complexity. 
In PAS we have the Gorouters which handle application routing and in PKS we have Ingress routers. 
This cookbook will show you how to deploy Istio to a PKS cluster and push an application using the deployed ingress service. 
It should be noted that NSX-T provides its own ingress routing functionality. This guide will also include native NSX-T Ingress 
routing capability and how to terminate TLS in its current release (NSX-T 2.2 and higher)._"

To configure Istio as your <%= vars.product_short %> ingress router, do the following:

* Verify PKS minimum requirements are met: [Prerequisites](#prerequisites)
* [Install Istio](#install-istio)
* [Setup Load Balancers](#setup-lb)
* Enable TLS
* Deploy Your Application
* [(Optional) Name of Task 2](#task-2)

<p class='note'><b>Note:</b> Unless the number of tasks in the procedure is particularly high, do not use numbered lead-ins in the task headings. For example, instead of "Task 1: Install the Plugin", use "Install the Plugin".</p>

## <a id='prerequisites'></a> Prerequisites

Before you setup ingress routing, you must confirm `KubeDNS` is running in your environment.  

To confirm that KubeDNS is running perform the following steps:  

1. Run the following command:

    ```
    kubectl cluster-info
    ```
1. Verify `KubeDNS` is listed and running.
1. If `KubeDNS` is not listed you must enable Post Install Scripts, in your BOSH Director, and delete and recreate your cluster.

## <a id='install-istio'></a> Install Istio

Istio provides ingress routing for a cluster's application workload. Perform the following steps to install Istio in your deployment.

1. To set the current `kubectl` context, run the following command:

    ```
    XXXXXXXXXXXXXX
    ```

1. To install Istio, run the following command:

    ```
    curl -L https://git.io/getLatestIstio | sh \
    -kubectl apply -f istio-*/install/kubernetes/istio.yaml
    ```

1. To configure Istio to scale for high availability, run the following command:

    ```
    kubectl -n istio-system scale deploy/istio-ingress --replicas=3
    ```

1. After running this command Istio will be up and running.  

1. To review your LoadBalancer configuration, run the following command:

    ```
    kubectl  --namespace=istio-system get services
    ```

1. Configure a Load Balancer based on the environment you are deploying to.

    * For Deploying to environments without NSX-T  
        1. To obtain a list of worker Ips, run the following command:

        ```
        kubectl -o jsonpath='{.items[*].status.addresses[0].address}' get nodes
        ```

## <a id='setup-lb-not-nsxt'></a> Configure Load Balancers to environments without NSX-T
1. To conigure a wildcard DNS entry to the EXTERNAL-IP that will be used by applications similar to the PAS “Apps Domain”
1. To create a self-signed certificate run the following command:

```
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls.key -out /tmp/tls.crt -subj "/CN=*.pks-cluster.haas-108.pez.pivotal.io"
````

Where `DOMAIN` is your cluster's domain.

1. To upload your newly created certificate and key, run the following command: 

```
kubectl -n istio-system create secret tls istio-ingress-certs --key /tmp/tls.key --cert /tmp/tls.crt
```

## <a id='setup-lb-nsxt'></a> Configure Load Balancers to environments with NSX-T
1. To conigure a wildcard DNS entry to the EXTERNAL-IP that will be used by applications similar to the PAS “Apps Domain”
1. To create a self-signed certificate run the following command:

```
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls.key -out /tmp/tls.crt -subj "/CN=*.pks-cluster.haas-108.pez.pivotal.io"
````

Where `DOMAIN` is your cluster's domain.

1. To upload your newly created certificate and key, run the following command: 

```
kubectl -n istio-system create secret tls istio-ingress-certs --key /tmp/tls.key --cert /tmp/tls.crt
```

Istio provides ingress routing for a cluster's application workload. Perform the following steps to install Istio in your deployment.

## <a id='deploy'></a> Configure App Deployment
1. Create a YAML configuration file named `ingress-istio.yml`.
1. Update the `ingress-istio.yml` file to match the following format:

    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: APP-NAME-ingress
      namespace: APP-SUBDOMAIN
      annotations:
        kubernetes.io/ingress.class: "istio"
    spec:
      rules:
      - host: APP-SUBDOMAIN.DOMAIN-NAME
        http:
          paths:
          - path: /.*
            backend:
              serviceName: APP-NAME-service
              servicePort: PORT

    ```

    Where:
    * `APP-NAME` is your application's name.
    * `APP-SUBDOMAIN` is the subdomain name used to access your app.
    * `DOMAIN-NAME` is your host domain.
    * `PORT` is the port to use to access your app.

    For example:

    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: music-ingress
      namespace: wildspinner
      annotations:
        kubernetes.io/ingress.class: "istio"
    spec:
      rules:
      - host: wildspinner.example.com
        http:
          paths:
          - path: /.*
            backend:
              serviceName: music-service
              servicePort: 8080
    ```


## <a id='validate'></a> Validate configuration
Verify your load balancer configuration by opening a browser to your application's URL using the following format:

```
https://APP-NAME.DOMAIN-NAME
```

For example:

```
https://wildspinner.example.com
```



1. To set
1. To



1. Step 1
1. Step 2

## <a id='task-2'></a> (Optional) Task 2

Write a few sentences to describe the task and provide additional context on the task.

To [task], do the following:

1. Step 1
2. Step 2

## <a id='sample'></a> Procedural Content Samples

The following are common content types that may appear in procedural topics. Copy and paste the markdown to reuse it in your topic.

### "Fill-In-The-Fields" Table

In cases where users must fill out several fields on a page of a product, use the table format below within the procedure.

To configure the product, do the following:

1. In **Product Dashboard**, click **Settings**.
1. Configure the **Settings** fields as follows:
  <table>
    <tr>
    	<th>Field</th>
    	<th>Instructions</th>
    </tr>
    <tr>
    	<td>
    		<strong>Field Name</strong>
    	</td>
        <td>
        	Instructions for how to complete the field
        </td>
    </tr>
    <tr>
    	<td>
    		<strong>Field Name</strong>
    	</td>
        <td>
        	Instructions for how to complete the field
        </td>
    </tr>
  </table>

### Note

<p class='note'><b>Note:</b></p>

### Warning

<p class='note warning'><b>Warning:</b></p>

## <a id='example'></a>Example Procedure Topic

The following is an example procedure topic with important points highlighted.

![Annotated procedure topic](../image/example-procedure-topic.png)  